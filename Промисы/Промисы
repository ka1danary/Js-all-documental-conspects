Промисы 

Инфа из гугла: 

    Promise – это специальный объект, который содержит своё состояние. Вначале pending («ожидание»), 
    затем – одно из: fulfilled («выполнено успешно») или rejected («выполнено с ошибкой»).

    На promise можно навешивать колбэки двух типов:

    onFulfilled – срабатывают, когда promise в состоянии «выполнен успешно».
    onRejected – срабатывают, когда promise в состоянии «выполнен с ошибкой».

Инфа из курса: 

    Промисы позволяют обрабатывать отложенные во времени события

    Например, программе необходимо послать запрос на сервер, но мы не знаем, когда сервер ответит
    То есть приложение должно ожидать ответа от сервера

    Чтобы приложение не зависало в ожидании запроса и выполняло другие действия, и существуют промисы
    Такой запрос, который мы шлем на сервер и не знаем, когда получим ответ называется АСИНХРОННЫМ

    Ответ приходит через некоторое время, а не сразу, то есть асинхронно

    =>  С помощью промисов в js можно обрабатывать отложенные во времени события

    Промис - это обещание предоставить результат позже 

    Также промис может вернуть ошибку, если результат предоставить невоможно

    --------    Состояния промиса

    1. Ожидание (во время создания )
    2. Исполнен ( после возврата какого-то результата )
    3. Отклонен ( при возникновении какой-то ошибки )

    ------      Создание промиса ( в качестве аргумента принимает колбэк функцию с двумя параметрами )

        const myPromise == new Promise( (resolve, reject) => {
            // выполнение ассинхронных действий
            // в результате нужно вызвать либо resolve либо reject
        })

        // вновь созданный промис будет в состоянии pending

    ------      Получение результата промиса 

        myPromise  
            .then( value => {
                // Действия в случае успешного выполнения Промиса
                // Значение value => это значение, переданное в вызове функции resolve внутри промиса (то есть при создании)
            })
            .catch( error => {
                // Действия в случае отклонения промиса
                // Значение error => это значение, переданное в вызове функции reject внутри промиса 
            })

            then catch можно комбинировать
